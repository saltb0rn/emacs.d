;;; Code:

(defun gl-matrix-vec4-add (vec1 vec2)
  (let ((vec1-x (float (elt vec1 0)))
        (vec1-y (float (elt vec1 1)))
        (vec1-z (float (elt vec1 2)))
        (vec1-w (float (elt vec1 3)))
        (vec2-x (float (elt vec2 0)))
        (vec2-y (float (elt vec2 1)))
        (vec2-z (float (elt vec2 2)))
        (vec2-w (float (elt vec2 3))))
    (list
     (+ vec1-x vec2-x)
     (+ vec1-y vec2-y)
     (+ vec1-z vec2-z)
     (+ vec1-w vec2-w))))

(defun gl-matrix-vec4-subtract (vec1 vec2)
  (let ((vec1-x (float (elt vec1 0)))
        (vec1-y (float (elt vec1 1)))
        (vec1-z (float (elt vec1 2)))
        (vec1-w (float (elt vec1 3)))
        (vec2-x (float (elt vec2 0)))
        (vec2-y (float (elt vec2 1)))
        (vec2-z (float (elt vec2 2)))
        (vec2-w (float (elt vec2 3))))  
    (list
     (- vec1-x vec2-x)
     (- vec1-y vec2-y)
     (- vec1-z vec2-z)
     (- vec1-w vec2-w))))

(defun gl-matrix-vec4-length (vec1)
  (let ((vec1-x (float (elt vec1 0)))
        (vec1-y (float (elt vec1 1)))
        (vec1-z (float (elt vec1 2)))
        (vec1-w (float (elt vec1 3))))
    (sqrt (+
           (* vec1-x vec1-x)
           (* vec1-y vec1-y)
           (* vec1-z vec1-z)
           (* vec1-w vec1-w)))))

(defun gl-matrix-vec4-normalize (vec1)
  (let* ((vec1-x (float (elt vec1 0)))
         (vec1-y (float (elt vec1 1)))
         (vec1-z (float (elt vec1 2)))
         (vec1-w (float (elt vec1 3)))
         (len (sqrt
               (+
                (* vec1-x vec1-x)
                (* vec1-y vec1-y)
                (* vec1-z vec1-z)
                (* vec1-w vec1-w)))))
    (when (> len 0)
      (setq len (/ 1 len)))
    (list
     (* vec1-x len)
     (* vec1-y len)
     (* vec1-z len)
     (* vec1-w len))))

(defun gl-matrix-vec4-cross (vec1 vec2 vec3)
  (let ((vec1-x (float (elt vec1 0)))
        (vec1-y (float (elt vec1 1)))
        (vec1-z (float (elt vec1 2)))
        (vec1-w (float (elt vec1 3)))
        (vec2-x (float (elt vec2 0)))
        (vec2-y (float (elt vec2 1)))
        (vec2-z (float (elt vec2 2)))
        (vec2-w (float (elt vec2 3)))
        (vec3-x (float (elt vec3 0)))
        (vec3-y (float (elt vec3 1)))
        (vec3-z (float (elt vec3 2)))
        (vec3-w (float (elt vec3 3))))
    (let ((a (- (* vec2-x vec3-y) (* vec2-y vec3-x)))
          (b (- (* vec2-x vec3-z) (* vec2-z vec3-x)))
          (c (- (* vec2-x vec3-w) (* vec2-w vec3-x)))
          (d (- (* vec2-y vec3-z) (* vec2-z vec3-y)))
          (e (- (* vec2-y vec3-w) (* vec2-w vec3-y)))
          (f (- (* vec2-z vec3-w) (* vec2-w vec3-z)))
          (g vec1-x)
          (h vec1-y)
          (i vec1-z)
          (j vec1-w))
      (list
       (+ (* h f) (* -1.0 i e) (* j d))
       (+ (* -1.0 g f) (* i c) (* j b))
       (+ (* g e) (* -1.0 h c) (* j a))
       (+ (* -1.0 g d) (* h b) (* -1 i a))))))

(defun gl-matrix-vec4-dot (vec1 vec2)
  (let ((vec1-x (float (elt vec1 0)))
        (vec1-y (float (elt vec1 1)))
        (vec1-z (float (elt vec1 2)))
        (vec1-w (float (elt vec1 3)))
        (vec2-x (float (elt vec2 0)))
        (vec2-y (float (elt vec2 1)))
        (vec2-z (float (elt vec2 2)))
        (vec2-w (float (elt vec2 3))))
    (+ (* vec1-x vec2-x)
       (* vec1-y vec2-y)
       (* vec1-z vec2-z)
       (* vec1-w vec2-w))))

(provide 'gl-matrix-vec4)

;;; gl-matrix-vec4.el ends here
